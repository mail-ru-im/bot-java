plugins {
    id "maven"
    id "maven-publish"
    id "java"
    id "jacoco"
    id "signing"
}

targetCompatibility = versions.javaVersion
sourceCompatibility = versions.javaVersion

group = "ru.mail.im"
archivesBaseName = "bot-api"
version = "1.2.2"

repositories {
    mavenCentral()
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = false
    }
}

check.dependsOn jacocoTestReport

dependencies {
    compile "com.google.code.findbugs:jsr305:${versions.jsr305}"
    compile "com.squareup.okhttp3:okhttp:${versions.okhttp}"
    compile "com.google.code.gson:gson:${versions.gson}"
    compile "org.slf4j:slf4j-api:${versions.slf4j}"

    testCompile "junit:junit:${versions.junit}"
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

javadoc.failOnError = false
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

signing {
    useGpgCmd()
    sign configurations.archives
}

File propsFile = project.rootProject.file('local.properties')
if (propsFile.exists()) {
    Properties properties = new Properties()
    properties.load(propsFile.newDataInputStream())
    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                repository(url: "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(
                            userName: properties['sonatype.ossrhUsername'],
                            password: properties['sonatype.ossrhPassword']
                    )
                }

                snapshotRepository(url: "https://s01.oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(
                            userName: properties['sonatype.ossrhUsername'],
                            password: properties['sonatype.ossrhPassword']
                    )
                }

                pom.project {
                    name 'bot-api'
                    packaging 'jar'
                    // optionally artifactId can be defined here
                    description 'Java interface for bot API'
                    url 'https://github.com/mail-ru-im/bot-java'

                    scm {
                        connection 'scm:git:https://github.com/mail-ru-im/bot-java'
                        developerConnection 'scm:git:https://github.com/mail-ru-im/bot-java'
                        url 'https://github.com/mail-ru-im/bot-java'
                    }

                    licenses {
                        license {
                            name "MIT License"
                            url "http://www.opensource.org/licenses/mit-license.php"
                            distribution "repo"
                        }
                    }

                    developers {
                        developer {
                            id properties['developer.id']
                            name properties['developer.name']
                            email properties['developer.email']
                        }
                    }
                }
            }
        }
    }
} else {
    println("There is no local.properties file included")
}
